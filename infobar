#!/bin/bash
# -- Title:   infobar
# -- Author:  dkeg
# -- Created: 2017

#################################################
# system information bar using lemonbar \
# RAG color values to display info state \
# determine geometry and parameter output \
# base on current wm
# FYI - I souce external files for geometry\
# , colors, and glyphs/icons. \
# I included within the script for simplicity\
#################################################

## glyphs
glymem=""
glyvol=""
glymute=""
glynote=""
glylistn=""
glypause=""
glyplay=""
glystop=""
glychrg=""
glybatt=""
glybattlower=""
glybattlow=""
glybattmid=""
glybatt34=""
glybattclose=""
glybattfull=""
glybattalert=""
glybattpanic=""
glyclock=""
glycal=""
glywifi=""
glywifi2=""
glywifi3=""
gnc=""
glycrnt=""
glyinfo=""
glytemp=""

## extras
SEP=" "
SE2P=" "
a="#FF"

## colors
bg=$(xrdb -query|awk '/\*background/ {print $2}'|cut -d '#' -f2)
fg=$(xrdb -query|awk '/\*foreground/ {print $2}'|cut -d '#' -f2)
blk=$(xrdb -query|awk '/\*color0:/ {print $2}'|cut -d '#' -f2)
bblk=$(xrdb -query|awk '/\*color8:/ {print $2}'|cut -d '#' -f2)
red=$(xrdb -query|awk '/\*color1:/ {print $2}'|cut -d '#' -f2)
grn=$(xrdb -query|awk '/\*color2:/ {print $2}'|cut -d '#' -f2)
ylw=$(xrdb -query|awk '/\*color3:/ {print $2}'|cut -d '#' -f2)
blu=$(xrdb -query|awk '/\*color4:/ {print $2}'|cut -d '#' -f2)
mag=$(xrdb -query|awk '/\*color5:/ {print $2}'|cut -d '#' -f2)
cyn=$(xrdb -query|awk '/\*color6:/ {print $2}'|cut -d '#' -f2)
wht=$(xrdb -query|awk '/\*color7:/ {print $2}'|cut -d '#' -f2)

## set RAG values for color output based on state
PANIC="%{B$a$mag}%{F$a$wht}$SEP"
ALERT="%{B$a$red}%{f$a$wht}$SEP"
WARN="%{B$a$ylw}%{F$a$blk}$SEP"
GOOD="%{B$a$grn}%{F$a$blk}$SEP"
HOT="%{B$a$red}%{F$a$wht}$SEP"
WARM="%{B$a$blu}%{F$a$wht}$SEP"
NORM="%{B$a$cyn}%{F$a$blk}$SEP"
PLAIN="%{B$a$wht}%{F$a$bblk}$SEP"
GEN="%{B$a$bblk}%{F$a$wht}$SEP"
BLACK="%{B$a$blk}%{F$a$wht}$SEP"
CLR="$SEP%{F-}%{B-}"

## which wm?
## add others as needed
wms=( xwait windowchef bspwm herbstluftwm 2bwm )
   for wm in ${wms[@]}; do
      pid=$(pgrep -x -u $USER $wm)
         if [[ "$pid" ]];then
             mywm=$wm
         fi
   done

function status {
    memory() {
        mem=$(free -m | awk 'NR==2 {print $3}')
            if [[ $mem -ge "500" ]]; then
                m="$ALERT"$SEP"$mem"
            elif [[ $mem -gt "300" ]] && [[ $mem -lt "500" ]]; then
                m="$WARN"$SEP"$mem"
            else
                m="$GOOD"$SEP"$mem"
            fi
        echo "$PLAIN$glymem$CLR$m$CLR"
    }

    temperature() {
        temp=$(cat /sys/class/thermal/thermal_zone0/temp | awk '{print $1/1000}')
            if [[ $temp -gt "60" ]]; then
                t="$HOT"$SEP"$temp"
            elif [[ $temp -le "60" ]] && [[ $mem = "50" ]]; then
                t="$WARM"$SEP"$temp"
            else
                t="$NORM"$SEP"$temp"
            fi
        echo "$PLAIN$glytemp$CLR$t$CLR"
    }

    battery() {
        state=$(cat /sys/class/power_supply/BAT0/status)
        lvl=$(cat /sys/class/power_supply/BAT0/capacity)

        case $state in
            "Charging")
                current="$PLAIN$glychrg$CLR$NORM$SEP$lvl" ;;
            "Discharging")
                if [[ $lvl -le '10' ]]; then
                    current="$PANIC$glybattpanic$SEP$lvl"
                elif [[ $lvl -gt '10' ]] && [[ $lvl -le '30' ]]; then
                    current="$PLAIN$glybattlower$CLR$ALERT$SE2P$lvl"
                elif [[ $lvl -gt '30' ]] && [[ $lvl -lt '80' ]]; then
                    current="$PLAIN$glybattlow$CLR$WARN$SE2P$lvl"
                else
                    current="$PLAIN$glybattclose$CLR$GOOD$SE2P$lvl"
                fi ;;
            "Full")
                current="$PLAIN$glybattfull$CLR$GOOD$SE2P$state" ;;
        esac
        echo "$current$CLR"
    }

    clockdate() {
	      clockd=$(date +'%d %b ')
        cd="${clockd^^}"    # force output to all caps
        echo $BLACK$glycal"$SE2P"$cd$CLR
	  }

    clocktime() {
        clockt=$(date +'%R')
        echo "$BLACK$glyclock$CLR$PLAIN$clockt$CLR"
    }

    vol() {
        vol=$(amixer get Master|awk 'NR==5 {print $4}'|cut -d '%' -f1 | cut -d '[' -f2)
        mut=$(amixer get Master | awk 'NR==5 {print $6}')
        kern=$(uname -a|awk '{print $3}'|cut -d '-' -f3)
             ## are headphones plugged in
             ## different locations per kernel
             if [[ $kern = "liquorix" ]]; then
                 head=$(cat "/proc/asound/card0/codec#0" | awk 'NR==137 {print $2}')
             else
                 head=$(cat "/proc/asound/card0/codec#0" | awk 'NR==141 {print $2}')
             fi
          if [[ $mut = "[off]" ]] ;then
              sound="$PLAIN$glymute$CLR$ALERT$SE2P'M'"
          elif [[ $head = "0x00:" ]] ;then
              sound="$PLAIN$glylistn$CLR$PANIC$SE2P$vol"
          else
              sound="$PLAIN$glyvol$CLR$NORM$SE2P$vol"
          fi
        echo $sound$CLR
	  }

    music() {
        ARTIST=$( cmus-remote -Q 2>/dev/null | grep "tag artist " | cut -d " " -f 3- )
        TITLE=$( cmus-remote -Q 2>/dev/null | grep title | cut -d " " -f 3- )
        STATE=$( cmus-remote -Q 2>/dev/null | grep status | cut -d " " -f 2- )
        ART="${ARTIST^^}"   # force output to all caps
        TTL="${TITLE^^}"    # force output to all caps
            if [[ -z "$ARTIST" ]]; then
                ek="$PLAIN$SEP--- "
                echo "$BLACK$glynote$CLR$ek$CLR"
            else
                case $STATE in
                    paused)
                      ek="$WARN$SEP$glypause"
                      ;;
                    playing)
                      ek="$GOOD$SEP$glyplay"
                      ;;
                    stopped)
                      ek="$ALERT$SEP$glystop"
                      ;;
                esac
            echo "$BLACK$glynote$CLR$PLAIN$ART - $TTL$CLR$ek$CLR"
            fi
    }

    wireless() {
        wifi=$(awk 'NR==3 {printf("%2.2d\n", ($3/70)*100)}' /proc/net/wireless)
            if [[ $wifi -lt 70 ]]; then
                strength="$PLAIN$glywifi3$CLR$ALERT$SEP$wifi"
            elif [[ $wifi -ge 70 ]] && [[ $wifi -lt 90 ]]; then
                strength="$PLAIN$glywifi2$CLR$WARN$SEP$wifi"
            else
                strength="$PLAIN$glywifi$CLR$GOOD$SEP$wifi"
            fi
      echo $strength$CLR
    }

    tags() {
      if [[ $mywm = "herbstluftwm" ]];then
        tag=$(herbstclient list_monitors | awk '{gsub(/"/," ");print $5}')
      fi
      tg="${tag^^}"     # force caps
      echo $PLAIN"$SE2P"$tg"$SEP"$CLR
    }

    groups() {
       if [[ $mywm = "xwait" ]]; then
          line=""
      else
          cur=$(xprop -root _NET_CURRENT_DESKTOP | awk '{print $3}')
          total=$(xprop -root _NET_NUMBER_OF_DESKTOPS | awk '{print $3}')

           for w in `seq 0 $((cur- 1))`; do line="$line"$SE2P"%{F$a$wht}$gnc"$SE2P""; done
           line="$line%{F$a$red}$glycrnt"$SE2P""
           for w in `seq $((cur + 2)) $total`; do line="$line"$SE2P"%{F$a$wht}$glycrnt"$SE2P""; done
      fi
       echo $line%{F-}
    }

    windowname() {
        if [[ $mywm = "xwait" ]]; then
          title=""
      else
          name=$(xprop -id $(xprop -root _NET_ACTIVE_WINDOW | cut -d ' ' -f 5) WM_NAME | awk '{gsub(/"/," ");$1=$2="";print}')
          if [[ ! $name ]];then
              title=$GEN"window: null "
          else
            title=$GEN$name"$SEP"
          fi
      fi
     echo "${title^^}"$CLR  # force output to all caps
    }

    palette() {
      ## modify for you system
      printcol=$(awk '/\#include/ {gsub(/</," ");gsub(/>/," ");print $2}' $HOME/.Xresources.d/.colors | cut -d '/' -f6)
      p="$BLACK$glyinfo$CLR$PLAIN$printcol"
      echo "${p^^}"$CLR     # force output to all caps
    }

    ## different outputs per wm
    ## separate by left and right side
    left="$(palette)"$SE2P"$(memory)"$SE2P"$(temperature)"$SE2P"$(battery)"$SE2P""
    right="$(music)"$SE2P"$(vol)"$SE2P"$(wireless)"$SE2P"$(clocktime) "
    id="$PLAIN$(pfw)$CLR"

    xwait="$left$id%{r}$right"
    wchf="$left$(windowname)%{r}$right"
    herbst="$left$(windowname)%{r}$(tags)"$SE2P"$right"
    bspwm="$left$(windowname)%{c}$(groups)%{r}$right"

    case $mywm in
      xwait)
          output=$xwait ;;
      windowchef)
           output=$wchf ;;
      herbstluftwm)
           output=$herbst ;;
      bspwm|2bwm)
           output=$bspwm ;;
    esac
   echo "$output"
}

## different geometries per wm
## add geometry and parameters here. I'm pulling from an external script¬
## NOTE: I use lemonbar fork with borders (https://github.com/dark-yux/bar)
## adjust accordingly!

fonts="-f -jmk-neep-medium-r-normal--10-80-75-75-c-50-iso8859-1 -f -wuncon-siji-medium-r-normal--10-100-75-75-c-80-iso10646-1"
width="1366"
bs=6
bc=$a$bblk
## Long width specs
lh=18
lw=$(( $width - 2*bs ))
lx=0
ly=0
## Short width specs
bw=975      # bar width
sh=18
sx=$(( $width/2 - $bw/2 ))
sy=5

## set the bar configurations
S="-g ${bw}x${sh}+${sx}+${sy}"
L="-g ${lw}x${lh}+${lx}+${ly}"
P=" -d $fonts -R $bc -r $bs -B $a$bblk -F $a$fg"

## set wm options as configured for wm array above
    case $mywm in
      xwait)
          display="lemonbar "$S$P ;;
      windowchef)
          display="lemonbar "$S$P ;;
      herbstluftwm)
          display="lemonbar "$L$P ;;
      bspwm|2bwm)
          display="lemonbar "$L$P ;;
    esac

## pipe our output to lemonbar
while true
 do
	 echo "$(status)"
	sleep .5
done | $display
